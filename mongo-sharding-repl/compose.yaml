name: mongo-sharding-repl

services:

  # Конфигурационный сервер MongoDB для организации шардирования.
  mongo_config_srv:
    image: mongo:latest
    container_name: mongo_config_srv 
    restart: always
    ports:
      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr",
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27019" # Номер порта взят из документации для роли инстанса (см. https://www.mongodb.com/docs/manual/reference/default-mongodb-port/).
      ] 
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  ###
  # Настройка шарда 1 и его реплик.
  ### 
  mongo_shard1:
    image: mongo:latest
    container_name: mongo_shard1
    restart: always
    ports:
      - "27022:27022"
    networks:
      app-network:
        ipv4_address: 173.17.0.9
    volumes:
      - shard1-data:/data/db
    command:
      [
        "--shardsvr", # Запуск в режиме шардинга.
        "--replSet",
        "shard1", # Название реплики первого шарда.
        "--bind_ip_all",
        "--port",
        "27022"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  mongo_shard1_r1:
    image: mongo:latest
    container_name: mongo_shard1_r1
    depends_on:
      - mongo_shard1
    restart: always
    ports:
      - "27024:27024"
    networks:
      app-network:
        ipv4_address: 173.17.0.12
    volumes:
      - shard1-r1-data:/data/db
    command:
      [
        "--replSet",
        "shard1", # Название реплики первого шарда.
        "--bind_ip_all",
        "--port",
        "27024"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  mongo_shard1_r2:
    image: mongo:latest
    container_name: mongo_shard1_r2
    depends_on:
      - mongo_shard1
    restart: always
    ports:
      - "27025:27025"
    networks:
      app-network:
        ipv4_address: 173.17.0.13
    volumes:
      - shard1-r2-data:/data/db
    command:
      [
        "--replSet",
        "shard1", # Название реплики первого шарда.
        "--bind_ip_all",
        "--port",
        "27025"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  mongo_shard1_r3:
    image: mongo:latest
    container_name: mongo_shard1_r3
    depends_on:
      - mongo_shard1
    restart: always
    ports:
      - "27026:27026"
    networks:
      app-network:
        ipv4_address: 173.17.0.14
    volumes:
      - shard1-r3-data:/data/db
    command:
      [
        "--replSet",
        "shard1", # Название реплики первого шарда.
        "--bind_ip_all",
        "--port",
        "27026"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  ###
  # Настройка шарда 2 и его реплик.
  ### 
  mongo_shard2:
    image: mongo:latest
    container_name: mongo_shard2
    restart: always
    ports:
      - "27023:27023"
    networks:
      app-network:
        ipv4_address: 173.17.0.8
    volumes:
      - shard2-data:/data/db
    command:
      [
        "--shardsvr", # Запуск в режиме шардинга.
        "--replSet",
        "shard2", # Название реплики второго шарда.
        "--bind_ip_all",
        "--port",
        "27023"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  mongo_shard2_r1:
    image: mongo:latest
    container_name: mongo_shard2_r1
    depends_on:
      - mongo_shard2
    restart: always
    ports:
      - "27027:27027"
    networks:
      app-network:
        ipv4_address: 173.17.0.15
    volumes:
      - shard2-r1-data:/data/db
    command:
      [
        "--replSet",
        "shard2", # Название реплики первого шарда.
        "--bind_ip_all",
        "--port",
        "27027"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  mongo_shard2_r2:
    image: mongo:latest
    container_name: mongo_shard2_r2
    depends_on:
      - mongo_shard2
    restart: always
    ports:
      - "27028:27028"
    networks:
      app-network:
        ipv4_address: 173.17.0.16
    volumes:
      - shard2-r2-data:/data/db
    command:
      [
        "--replSet",
        "shard2", # Название реплики первого шарда.
        "--bind_ip_all",
        "--port",
        "27028"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  mongo_shard2_r3:
    image: mongo:latest
    container_name: mongo_shard2_r3
    depends_on:
      - mongo_shard2
    restart: always
    ports:
      - "27029:27029"
    networks:
      app-network:
        ipv4_address: 173.17.0.17
    volumes:
      - shard2-r3-data:/data/db
    command:
      [
        "--replSet",
        "shard2", # Название реплики первого шарда.
        "--bind_ip_all",
        "--port",
        "27029"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # Роутер запросов к шардам.
  mongo_router:
    image: mongo:latest
    depends_on:
      - mongo_config_srv
      - mongo_shard1
      - mongo_shard2
    container_name: mongo_router
    restart: always
    ports:
      - "27021:27021"
    networks:
      app-network:
        ipv4_address: 173.17.0.7
    command:
      [
        "mongos",
        "--configdb", 
        "config_server/mongo_config_srv:27019", # Передача данных серверу конфигурации.
        "--bind_ip_all",
        "--port",
        "27021"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s

  # Основное приложение.
  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongo_router
    ports:
      - 8080:8080
    networks:
      app-network:
        ipv4_address: 173.17.0.11
    environment:
      MONGODB_URL: "mongodb://173.17.0.7:27021"
      MONGODB_DATABASE_NAME: "somedb"

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

volumes:
  config-data:
  shard1-data:
  shard1-r1-data:
  shard1-r2-data:
  shard1-r3-data:
  shard2-data:
  shard2-r1-data:
  shard2-r2-data:
  shard2-r3-data:
